version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: neobridge-postgres
    environment:
      POSTGRES_DB: neobridge_dev
      POSTGRES_USER: neobridge_user
      POSTGRES_PASSWORD: neobridge_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neobridge_user -d neobridge_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: neobridge-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: neobridge-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: neobridge-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: neobridge-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: neobridge-kong
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8443:8443"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/var/lib/kong/kong.yml
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: neobridge-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - neobridge-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
                    grafana:
           image: grafana/grafana:10.0.0
           container_name: neobridge-grafana
           ports:
             - "3000:3000"
           environment:
             GF_SECURITY_ADMIN_USER: admin
             GF_SECURITY_ADMIN_PASSWORD: admin
             GF_USERS_ALLOW_SIGN_UP: false
           volumes:
             - grafana_data:/var/lib/grafana
             - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
           networks:
             - neobridge-network
           healthcheck:
             test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
             interval: 30s
             timeout: 10s
             retries: 3
         
         # Kong API Gateway
         kong-database:
           image: postgres:15-alpine
           container_name: neobridge-kong-database
           environment:
             POSTGRES_DB: kong
             POSTGRES_USER: kong
             POSTGRES_PASSWORD: kong_password
           volumes:
             - kong_data:/var/lib/postgresql/data
           networks:
             - neobridge-network
           healthcheck:
             test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
             interval: 10s
             timeout: 5s
             retries: 5
         
         kong:
           image: kong:3.4
           container_name: neobridge-kong
           depends_on:
             kong-database:
               condition: service_healthy
           environment:
             KONG_DATABASE: postgres
             KONG_PG_HOST: kong-database
             KONG_PG_USER: kong
             KONG_PG_PASSWORD: kong_password
             KONG_PG_DATABASE: kong
             KONG_PROXY_ACCESS_LOG: /dev/stdout
             KONG_ADMIN_ACCESS_LOG: /dev/stdout
             KONG_PROXY_ERROR_LOG: /dev/stderr
             KONG_ADMIN_ERROR_LOG: /dev/stderr
             KONG_ADMIN_LISTEN: 0.0.0.0:8001
             KONG_ADMIN_GUI_URL: http://localhost:8002
             KONG_PROXY_LISTEN: 0.0.0.0:8000
             KONG_UPSTREAM_KEEPALIVE: 32
             KONG_UPSTREAM_KEEPALIVE_TIMEOUT: 60s
             KONG_RATE_LIMITING: on
             KONG_RATE_LIMITING_POLICY: local
             KONG_CORS_ORIGINS: "*"
             KONG_CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
             KONG_CORS_HEADERS: "Content-Type,Authorization,X-Requested-With"
             KONG_CORS_EXPOSED_HEADERS: "X-Total-Count"
             KONG_CORS_CREDENTIALS: "true"
             KONG_CORS_MAX_AGE: 3600
             KONG_PROMETHEUS_METRICS: on
             KONG_PROMETHEUS_STATUS_CODES: on
             KONG_PROMETHEUS_LATENCY: on
             KONG_PROMETHEUS_BANDWIDTH: on
             KONG_PROMETHEUS_UPSTREAM_HEALTH: on
           ports:
             - "8000:8000"   # Proxy
             - "8001:8001"   # Admin API
             - "8002:8002"   # Admin GUI
           volumes:
             - ./neobridge-api-gateway/config:/etc/kong
           networks:
             - neobridge-network
           healthcheck:
             test: ["CMD", "kong", "health"]
             interval: 10s
             timeout: 5s
             retries: 5

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  kong_data:

networks:
  neobridge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
